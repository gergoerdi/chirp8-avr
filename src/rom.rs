use progmem_include_bytes::*;

use avr_progmem::raw::read_byte;
use core::ptr::addr_of;

use Peripherals;

#[link_section = ".progmem.data"]
static FONT_ROM: [u8;8 * 16] =
    [ 0xF0, 0x90, 0x90, 0x90, 0xF0, 0x00, 0x00, 0x00,
      0x20, 0x60, 0x20, 0x20, 0x70, 0x00, 0x00, 0x00,
      0xF0, 0x10, 0xF0, 0x80, 0xF0, 0x00, 0x00, 0x00,
      0xF0, 0x10, 0xF0, 0x10, 0xF0, 0x00, 0x00, 0x00,
      0x90, 0x90, 0xF0, 0x10, 0x10, 0x00, 0x00, 0x00,
      0xF0, 0x80, 0xF0, 0x10, 0xF0, 0x00, 0x00, 0x00,
      0xF0, 0x80, 0xF0, 0x90, 0xF0, 0x00, 0x00, 0x00,
      0xF0, 0x10, 0x20, 0x40, 0x40, 0x00, 0x00, 0x00,
      0xF0, 0x90, 0xF0, 0x90, 0xF0, 0x00, 0x00, 0x00,
      0xF0, 0x90, 0xF0, 0x10, 0xF0, 0x00, 0x00, 0x00,
      0xF0, 0x90, 0xF0, 0x90, 0x90, 0x00, 0x00, 0x00,
      0xE0, 0x90, 0xE0, 0x90, 0xE0, 0x00, 0x00, 0x00,
      0xF0, 0x80, 0x80, 0x80, 0xF0, 0x00, 0x00, 0x00,
      0xE0, 0x90, 0x90, 0x90, 0xE0, 0x00, 0x00, 0x00,
      0xF0, 0x80, 0xF0, 0x80, 0xF0, 0x00, 0x00, 0x00,
      0xF0, 0x80, 0xF0, 0x80, 0x80, 0x00, 0x00, 0x00
    ];

pub fn upload_font<P>(board: &P) where P: Peripherals {
    for offset in 0..FONT_ROM.len() {
        let data = unsafe{ read_byte(addr_of!(FONT_ROM[offset])) };
        board.write_ram(offset as u16, data);
    }
}

progmem_include_bytes!(PROG_ROM = "image/hidden.ch8");

pub fn upload_prog<P>(board: &P) where P: Peripherals {
    let base = 0x0200;

    for offset in 0..PROG_ROM.len() {
        let data = unsafe{ read_byte(addr_of!(PROG_ROM[offset])) };
        board.write_ram(base + offset as u16, data);
    }
}
